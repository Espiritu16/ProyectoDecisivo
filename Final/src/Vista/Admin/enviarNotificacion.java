/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista.Admin;

import Controlador.PatronFactory.CrearDAOFactory;
import Controlador.PatronFactory.CrearEntidadFactoryImpl;
import Modelo.Observer.BotonObservador;
import Modelo.Observer.Formulario;
import Modelo.SugerenciasPrototype.PrototypeNotificacion;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author sankef
 */
public class enviarNotificacion extends javax.swing.JFrame {
    
         private Formulario formulario;
        
    /**
     * Creates new form enviarNotificacion
     */
    
    public enviarNotificacion() {
        initComponents();
        setLocationRelativeTo(null);  // Centra la ventana

        // Inicializamos el formulario
        formulario = new Formulario();

        // Crear el observador para el botón de enviar
        BotonObservador botonObservador = new BotonObservador(btnEnviarNotificacion);
        formulario.agregarObservador(botonObservador);  // Registrar el botón como observador

        // Validar los campos al agregar CaretListener
        camposNotificacion();
        
    }
    
    //nuevo
    // Método para actualizar el campo txtIdUsuario con el DNI seleccionado
    public void setDniEnVentanaNotificacion(String dni) {
        txtIdUsuario.setText(dni);  // Asignar el DNI al campo de texto correspondiente
    }

    
    
    // Método para añadir CaretListeners a los campos
    public void camposNotificacion(){
        txtIdUsuario.addCaretListener(e -> actualizarEstadoFormulario());
        txtMensaje.addCaretListener(e -> actualizarEstadoFormulario());
        comboCanal.addActionListener(e -> actualizarEstadoFormulario());
    }

    // Actualizar el estado del formulario cada vez que un campo cambie
    public void actualizarEstadoFormulario() {
        // Verifica que todos los campos estén llenos y sean válidos
        boolean formularioCompleto = 
            !txtIdUsuario.getText().isEmpty() && esNumeroValido(txtIdUsuario.getText()) &&  // Verifica que el idUsuario sea un número
            !txtMensaje.getText().isEmpty() && // Verifica que el mensaje no esté vacío
            comboCanal.getSelectedIndex() != 0;  // Verifica que se haya seleccionado un canal

        // Notificar el estado actualizado del formulario a los observadores (botones)
        formulario.setFormularioCompleto(formularioCompleto);  // Cambia el estado del formulario y notifica a los observadores
    }

    // Método para validar que el idUsuario es numérico
    private boolean esNumeroValido(String texto) {
        try {
            Integer.parseInt(texto); // Intentamos convertir el texto en un número
            return true;
        } catch (NumberFormatException e) {
            return false; // Si no es un número, devolvemos false
        }
    }

    private void enviarNotificacion() {
        // Obtener los valores de los campos
        int idUsuario = Integer.parseInt(txtIdUsuario.getText());
        String mensaje = txtMensaje.getText();
        String canal = comboCanal.getSelectedItem().toString();

        // Aquí puedes llamar a tu DAO para guardar la notificación en la base de datos
        // CrearDAOFactory factory = new CrearEntidadFactoryImpl();
        // factory.crearPrototypeNotificacion(new PrototypeNotificacion(idUsuario, mensaje, canal));

        // Para ahora solo mostramos un mensaje
        JOptionPane.showMessageDialog(this, "Notificación enviada a usuario " + idUsuario + " por " + canal);
        this.dispose(); // Cerrar la ventana después de enviar la notificación
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtIdUsuario = new javax.swing.JTextField();
        comboCanal = new javax.swing.JComboBox<>();
        btnEnviarNotificacion = new javax.swing.JButton();
        txtMensaje = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        jLabel1.setText("Enviar Notificación");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(129, 15, -1, -1));

        jLabel3.setFont(new java.awt.Font("Roboto", 1, 15)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Mensaje");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, 50));

        jLabel4.setFont(new java.awt.Font("Roboto", 1, 15)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("DNI:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 68, 60, 30));

        jLabel5.setFont(new java.awt.Font("Roboto", 1, 15)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Canal");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, -1, 30));

        txtIdUsuario.setEditable(false);
        txtIdUsuario.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        jPanel1.add(txtIdUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 320, 30));

        comboCanal.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        comboCanal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Correo", "Whatsapp", "Mensaje de Texto", "Todos los canales" }));
        jPanel1.add(comboCanal, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 280, 320, 30));

        btnEnviarNotificacion.setBackground(new java.awt.Color(153, 255, 153));
        btnEnviarNotificacion.setText("Enviar Notificacion");
        btnEnviarNotificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarNotificacionActionPerformed(evt);
            }
        });
        jPanel1.add(btnEnviarNotificacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 400, 160, 40));

        txtMensaje.setColumns(20);
        txtMensaje.setFont(new java.awt.Font("Roboto", 0, 15)); // NOI18N
        txtMensaje.setRows(5);
        txtMensaje.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(txtMensaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 150, 320, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 470, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEnviarNotificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarNotificacionActionPerformed
       // Obtener los datos del formulario
    String dniUsuario = txtIdUsuario.getText();  // Obtener el DNI del campo de texto
    String mensaje = txtMensaje.getText();  // Obtener el mensaje
    String canal = comboCanal.getSelectedItem().toString();  // Obtener el canal (Correo, WhatsApp, SMS)

    // Validar que los campos no estén vacíos
    if (dniUsuario.isEmpty() || mensaje.isEmpty() || canal.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Crear la instancia de PrototypeNotificacion
    PrototypeNotificacion notificacion = new PrototypeNotificacion();
    notificacion.setDni(dniUsuario);  // Usamos el DNI como String
    notificacion.setMensaje(mensaje);
    notificacion.setEstado("Pendiente");  // El estado inicial
    notificacion.setCanal(canal);

    // Llamar al DAO para crear la notificación
    CrearDAOFactory factory = new CrearEntidadFactoryImpl();
    int idNotificacion = factory.crearPrototypeNotificacion(notificacion);  // Usamos el método DAO para crear la notificación

    // Verificar si la notificación se guardó correctamente
    if (idNotificacion != -1) {
        JOptionPane.showMessageDialog(this, "Notificación enviada con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "Hubo un error al enviar la notificación. Intenta nuevamente.", "Error", JOptionPane.ERROR_MESSAGE);
    }

    // Crear tres notificaciones para diferentes canales (Correo, WhatsApp, SMS)
    String[] canales = {"Correo", "WhatsApp", "SMS"};
    
    // Iteramos a través de los canales y creamos una notificación para cada uno
    for (String canalSeleccionado : canales) {
        notificacion.setCanal(canalSeleccionado);
        int idNotificacionNuevo = factory.crearPrototypeNotificacion(notificacion);

        // Verificar si se creó la notificación para este canal
        if (idNotificacionNuevo != -1) {
            System.out.println("Notificación enviada por " + canalSeleccionado + " con ID: " + idNotificacionNuevo);
        } else {
            System.out.println("Error al enviar la notificación por " + canalSeleccionado);
        }
    }

    // Cerrar la ventana después de enviar las notificaciones
    this.dispose();  // Cerrar la ventana de notificación después de enviarla
    }//GEN-LAST:event_btnEnviarNotificacionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(enviarNotificacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(enviarNotificacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(enviarNotificacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(enviarNotificacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new enviarNotificacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnviarNotificacion;
    private javax.swing.JComboBox<String> comboCanal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtIdUsuario;
    private javax.swing.JTextArea txtMensaje;
    // End of variables declaration//GEN-END:variables

   public JTextField getTxtIdUsuario() {
        return txtIdUsuario;  // Retorna el campo de texto donde se mostrará el DNI
    }

    

}
